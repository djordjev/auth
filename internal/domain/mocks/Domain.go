// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/djordjev/auth/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// Domain is an autogenerated mock type for the Domain type
type Domain struct {
	mock.Mock
}

type Domain_Expecter struct {
	mock *mock.Mock
}

func (_m *Domain) EXPECT() *Domain_Expecter {
	return &Domain_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: setup, user
func (_m *Domain) Delete(setup domain.Setup, user domain.User) (bool, error) {
	ret := _m.Called(setup, user)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Setup, domain.User) (bool, error)); ok {
		return rf(setup, user)
	}
	if rf, ok := ret.Get(0).(func(domain.Setup, domain.User) bool); ok {
		r0 = rf(setup, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(domain.Setup, domain.User) error); ok {
		r1 = rf(setup, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Domain_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Domain_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - setup domain.Setup
//   - user domain.User
func (_e *Domain_Expecter) Delete(setup interface{}, user interface{}) *Domain_Delete_Call {
	return &Domain_Delete_Call{Call: _e.mock.On("Delete", setup, user)}
}

func (_c *Domain_Delete_Call) Run(run func(setup domain.Setup, user domain.User)) *Domain_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Setup), args[1].(domain.User))
	})
	return _c
}

func (_c *Domain_Delete_Call) Return(deleted bool, err error) *Domain_Delete_Call {
	_c.Call.Return(deleted, err)
	return _c
}

func (_c *Domain_Delete_Call) RunAndReturn(run func(domain.Setup, domain.User) (bool, error)) *Domain_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// LogIn provides a mock function with given fields: setup, user
func (_m *Domain) LogIn(setup domain.Setup, user domain.User) (domain.User, error) {
	ret := _m.Called(setup, user)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Setup, domain.User) (domain.User, error)); ok {
		return rf(setup, user)
	}
	if rf, ok := ret.Get(0).(func(domain.Setup, domain.User) domain.User); ok {
		r0 = rf(setup, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(domain.Setup, domain.User) error); ok {
		r1 = rf(setup, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Domain_LogIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogIn'
type Domain_LogIn_Call struct {
	*mock.Call
}

// LogIn is a helper method to define mock.On call
//   - setup domain.Setup
//   - user domain.User
func (_e *Domain_Expecter) LogIn(setup interface{}, user interface{}) *Domain_LogIn_Call {
	return &Domain_LogIn_Call{Call: _e.mock.On("LogIn", setup, user)}
}

func (_c *Domain_LogIn_Call) Run(run func(setup domain.Setup, user domain.User)) *Domain_LogIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Setup), args[1].(domain.User))
	})
	return _c
}

func (_c *Domain_LogIn_Call) Return(existing domain.User, err error) *Domain_LogIn_Call {
	_c.Call.Return(existing, err)
	return _c
}

func (_c *Domain_LogIn_Call) RunAndReturn(run func(domain.Setup, domain.User) (domain.User, error)) *Domain_LogIn_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPasswordRequest provides a mock function with given fields: setup, user
func (_m *Domain) ResetPasswordRequest(setup domain.Setup, user domain.User) (domain.User, error) {
	ret := _m.Called(setup, user)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Setup, domain.User) (domain.User, error)); ok {
		return rf(setup, user)
	}
	if rf, ok := ret.Get(0).(func(domain.Setup, domain.User) domain.User); ok {
		r0 = rf(setup, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(domain.Setup, domain.User) error); ok {
		r1 = rf(setup, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Domain_ResetPasswordRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPasswordRequest'
type Domain_ResetPasswordRequest_Call struct {
	*mock.Call
}

// ResetPasswordRequest is a helper method to define mock.On call
//   - setup domain.Setup
//   - user domain.User
func (_e *Domain_Expecter) ResetPasswordRequest(setup interface{}, user interface{}) *Domain_ResetPasswordRequest_Call {
	return &Domain_ResetPasswordRequest_Call{Call: _e.mock.On("ResetPasswordRequest", setup, user)}
}

func (_c *Domain_ResetPasswordRequest_Call) Run(run func(setup domain.Setup, user domain.User)) *Domain_ResetPasswordRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Setup), args[1].(domain.User))
	})
	return _c
}

func (_c *Domain_ResetPasswordRequest_Call) Return(sentTo domain.User, err error) *Domain_ResetPasswordRequest_Call {
	_c.Call.Return(sentTo, err)
	return _c
}

func (_c *Domain_ResetPasswordRequest_Call) RunAndReturn(run func(domain.Setup, domain.User) (domain.User, error)) *Domain_ResetPasswordRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: setup, user
func (_m *Domain) SignUp(setup domain.Setup, user domain.User) (domain.User, error) {
	ret := _m.Called(setup, user)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Setup, domain.User) (domain.User, error)); ok {
		return rf(setup, user)
	}
	if rf, ok := ret.Get(0).(func(domain.Setup, domain.User) domain.User); ok {
		r0 = rf(setup, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(domain.Setup, domain.User) error); ok {
		r1 = rf(setup, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Domain_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type Domain_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - setup domain.Setup
//   - user domain.User
func (_e *Domain_Expecter) SignUp(setup interface{}, user interface{}) *Domain_SignUp_Call {
	return &Domain_SignUp_Call{Call: _e.mock.On("SignUp", setup, user)}
}

func (_c *Domain_SignUp_Call) Run(run func(setup domain.Setup, user domain.User)) *Domain_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Setup), args[1].(domain.User))
	})
	return _c
}

func (_c *Domain_SignUp_Call) Return(newUser domain.User, err error) *Domain_SignUp_Call {
	_c.Call.Return(newUser, err)
	return _c
}

func (_c *Domain_SignUp_Call) RunAndReturn(run func(domain.Setup, domain.User) (domain.User, error)) *Domain_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyAccount provides a mock function with given fields: setup, token
func (_m *Domain) VerifyAccount(setup domain.Setup, token string) (bool, error) {
	ret := _m.Called(setup, token)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Setup, string) (bool, error)); ok {
		return rf(setup, token)
	}
	if rf, ok := ret.Get(0).(func(domain.Setup, string) bool); ok {
		r0 = rf(setup, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(domain.Setup, string) error); ok {
		r1 = rf(setup, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Domain_VerifyAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAccount'
type Domain_VerifyAccount_Call struct {
	*mock.Call
}

// VerifyAccount is a helper method to define mock.On call
//   - setup domain.Setup
//   - token string
func (_e *Domain_Expecter) VerifyAccount(setup interface{}, token interface{}) *Domain_VerifyAccount_Call {
	return &Domain_VerifyAccount_Call{Call: _e.mock.On("VerifyAccount", setup, token)}
}

func (_c *Domain_VerifyAccount_Call) Run(run func(setup domain.Setup, token string)) *Domain_VerifyAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Setup), args[1].(string))
	})
	return _c
}

func (_c *Domain_VerifyAccount_Call) Return(verified bool, err error) *Domain_VerifyAccount_Call {
	_c.Call.Return(verified, err)
	return _c
}

func (_c *Domain_VerifyAccount_Call) RunAndReturn(run func(domain.Setup, string) (bool, error)) *Domain_VerifyAccount_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPasswordReset provides a mock function with given fields: setup, token, password
func (_m *Domain) VerifyPasswordReset(setup domain.Setup, token string, password string) (domain.User, error) {
	ret := _m.Called(setup, token, password)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Setup, string, string) (domain.User, error)); ok {
		return rf(setup, token, password)
	}
	if rf, ok := ret.Get(0).(func(domain.Setup, string, string) domain.User); ok {
		r0 = rf(setup, token, password)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(domain.Setup, string, string) error); ok {
		r1 = rf(setup, token, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Domain_VerifyPasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPasswordReset'
type Domain_VerifyPasswordReset_Call struct {
	*mock.Call
}

// VerifyPasswordReset is a helper method to define mock.On call
//   - setup domain.Setup
//   - token string
//   - password string
func (_e *Domain_Expecter) VerifyPasswordReset(setup interface{}, token interface{}, password interface{}) *Domain_VerifyPasswordReset_Call {
	return &Domain_VerifyPasswordReset_Call{Call: _e.mock.On("VerifyPasswordReset", setup, token, password)}
}

func (_c *Domain_VerifyPasswordReset_Call) Run(run func(setup domain.Setup, token string, password string)) *Domain_VerifyPasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Setup), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Domain_VerifyPasswordReset_Call) Return(updated domain.User, err error) *Domain_VerifyPasswordReset_Call {
	_c.Call.Return(updated, err)
	return _c
}

func (_c *Domain_VerifyPasswordReset_Call) RunAndReturn(run func(domain.Setup, string, string) (domain.User, error)) *Domain_VerifyPasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// NewDomain creates a new instance of Domain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDomain(t interface {
	mock.TestingT
	Cleanup(func())
}) *Domain {
	mock := &Domain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.32.3. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockRepositoryUser is an autogenerated mock type for the RepositoryUser type
type MockRepositoryUser struct {
	mock.Mock
}

type MockRepositoryUser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryUser) EXPECT() *MockRepositoryUser_Expecter {
	return &MockRepositoryUser_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: user
func (_m *MockRepositoryUser) Create(user User) (User, error) {
	ret := _m.Called(user)

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(User) (User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(User) User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryUser_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepositoryUser_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user User
func (_e *MockRepositoryUser_Expecter) Create(user interface{}) *MockRepositoryUser_Create_Call {
	return &MockRepositoryUser_Create_Call{Call: _e.mock.On("Create", user)}
}

func (_c *MockRepositoryUser_Create_Call) Run(run func(user User)) *MockRepositoryUser_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(User))
	})
	return _c
}

func (_c *MockRepositoryUser_Create_Call) Return(newUser User, err error) *MockRepositoryUser_Create_Call {
	_c.Call.Return(newUser, err)
	return _c
}

func (_c *MockRepositoryUser_Create_Call) RunAndReturn(run func(User) (User, error)) *MockRepositoryUser_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockRepositoryUser) Delete(id uint) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryUser_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepositoryUser_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *MockRepositoryUser_Expecter) Delete(id interface{}) *MockRepositoryUser_Delete_Call {
	return &MockRepositoryUser_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockRepositoryUser_Delete_Call) Run(run func(id uint)) *MockRepositoryUser_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockRepositoryUser_Delete_Call) Return(success bool, err error) *MockRepositoryUser_Delete_Call {
	_c.Call.Return(success, err)
	return _c
}

func (_c *MockRepositoryUser_Delete_Call) RunAndReturn(run func(uint) (bool, error)) *MockRepositoryUser_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: email
func (_m *MockRepositoryUser) GetByEmail(email string) (User, error) {
	ret := _m.Called(email)

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryUser_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockRepositoryUser_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockRepositoryUser_Expecter) GetByEmail(email interface{}) *MockRepositoryUser_GetByEmail_Call {
	return &MockRepositoryUser_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *MockRepositoryUser_GetByEmail_Call) Run(run func(email string)) *MockRepositoryUser_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepositoryUser_GetByEmail_Call) Return(user User, err error) *MockRepositoryUser_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockRepositoryUser_GetByEmail_Call) RunAndReturn(run func(string) (User, error)) *MockRepositoryUser_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function with given fields: username
func (_m *MockRepositoryUser) GetByUsername(username string) (User, error) {
	ret := _m.Called(username)

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryUser_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockRepositoryUser_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockRepositoryUser_Expecter) GetByUsername(username interface{}) *MockRepositoryUser_GetByUsername_Call {
	return &MockRepositoryUser_GetByUsername_Call{Call: _e.mock.On("GetByUsername", username)}
}

func (_c *MockRepositoryUser_GetByUsername_Call) Run(run func(username string)) *MockRepositoryUser_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepositoryUser_GetByUsername_Call) Return(user User, err error) *MockRepositoryUser_GetByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockRepositoryUser_GetByUsername_Call) RunAndReturn(run func(string) (User, error)) *MockRepositoryUser_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// SetPassword provides a mock function with given fields: user, password
func (_m *MockRepositoryUser) SetPassword(user User, password string) error {
	ret := _m.Called(user, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(User, string) error); ok {
		r0 = rf(user, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoryUser_SetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPassword'
type MockRepositoryUser_SetPassword_Call struct {
	*mock.Call
}

// SetPassword is a helper method to define mock.On call
//   - user User
//   - password string
func (_e *MockRepositoryUser_Expecter) SetPassword(user interface{}, password interface{}) *MockRepositoryUser_SetPassword_Call {
	return &MockRepositoryUser_SetPassword_Call{Call: _e.mock.On("SetPassword", user, password)}
}

func (_c *MockRepositoryUser_SetPassword_Call) Run(run func(user User, password string)) *MockRepositoryUser_SetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(User), args[1].(string))
	})
	return _c
}

func (_c *MockRepositoryUser_SetPassword_Call) Return(_a0 error) *MockRepositoryUser_SetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoryUser_SetPassword_Call) RunAndReturn(run func(User, string) error) *MockRepositoryUser_SetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: user
func (_m *MockRepositoryUser) Verify(user User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoryUser_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockRepositoryUser_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - user User
func (_e *MockRepositoryUser_Expecter) Verify(user interface{}) *MockRepositoryUser_Verify_Call {
	return &MockRepositoryUser_Verify_Call{Call: _e.mock.On("Verify", user)}
}

func (_c *MockRepositoryUser_Verify_Call) Run(run func(user User)) *MockRepositoryUser_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(User))
	})
	return _c
}

func (_c *MockRepositoryUser_Verify_Call) Return(_a0 error) *MockRepositoryUser_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoryUser_Verify_Call) RunAndReturn(run func(User) error) *MockRepositoryUser_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoryUser creates a new instance of MockRepositoryUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryUser {
	mock := &MockRepositoryUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

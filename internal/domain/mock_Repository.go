// Code generated by mockery v2.33.0. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Atomic provides a mock function with given fields: fn
func (_m *MockRepository) Atomic(fn func(Repository) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(Repository) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Atomic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Atomic'
type MockRepository_Atomic_Call struct {
	*mock.Call
}

// Atomic is a helper method to define mock.On call
//   - fn func(Repository) error
func (_e *MockRepository_Expecter) Atomic(fn interface{}) *MockRepository_Atomic_Call {
	return &MockRepository_Atomic_Call{Call: _e.mock.On("Atomic", fn)}
}

func (_c *MockRepository_Atomic_Call) Run(run func(fn func(Repository) error)) *MockRepository_Atomic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(Repository) error))
	})
	return _c
}

func (_c *MockRepository_Atomic_Call) Return(_a0 error) *MockRepository_Atomic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Atomic_Call) RunAndReturn(run func(func(Repository) error) error) *MockRepository_Atomic_Call {
	_c.Call.Return(run)
	return _c
}

// ForgetPassword provides a mock function with given fields: ctx
func (_m *MockRepository) ForgetPassword(ctx context.Context) RepositoryForgetPassword {
	ret := _m.Called(ctx)

	var r0 RepositoryForgetPassword
	if rf, ok := ret.Get(0).(func(context.Context) RepositoryForgetPassword); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RepositoryForgetPassword)
		}
	}

	return r0
}

// MockRepository_ForgetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForgetPassword'
type MockRepository_ForgetPassword_Call struct {
	*mock.Call
}

// ForgetPassword is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) ForgetPassword(ctx interface{}) *MockRepository_ForgetPassword_Call {
	return &MockRepository_ForgetPassword_Call{Call: _e.mock.On("ForgetPassword", ctx)}
}

func (_c *MockRepository_ForgetPassword_Call) Run(run func(ctx context.Context)) *MockRepository_ForgetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_ForgetPassword_Call) Return(_a0 RepositoryForgetPassword) *MockRepository_ForgetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_ForgetPassword_Call) RunAndReturn(run func(context.Context) RepositoryForgetPassword) *MockRepository_ForgetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// Session provides a mock function with given fields: ctx
func (_m *MockRepository) Session(ctx context.Context) RepositorySession {
	ret := _m.Called(ctx)

	var r0 RepositorySession
	if rf, ok := ret.Get(0).(func(context.Context) RepositorySession); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RepositorySession)
		}
	}

	return r0
}

// MockRepository_Session_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Session'
type MockRepository_Session_Call struct {
	*mock.Call
}

// Session is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) Session(ctx interface{}) *MockRepository_Session_Call {
	return &MockRepository_Session_Call{Call: _e.mock.On("Session", ctx)}
}

func (_c *MockRepository_Session_Call) Run(run func(ctx context.Context)) *MockRepository_Session_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_Session_Call) Return(_a0 RepositorySession) *MockRepository_Session_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Session_Call) RunAndReturn(run func(context.Context) RepositorySession) *MockRepository_Session_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function with given fields: ctx
func (_m *MockRepository) User(ctx context.Context) RepositoryUser {
	ret := _m.Called(ctx)

	var r0 RepositoryUser
	if rf, ok := ret.Get(0).(func(context.Context) RepositoryUser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RepositoryUser)
		}
	}

	return r0
}

// MockRepository_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type MockRepository_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) User(ctx interface{}) *MockRepository_User_Call {
	return &MockRepository_User_Call{Call: _e.mock.On("User", ctx)}
}

func (_c *MockRepository_User_Call) Run(run func(ctx context.Context)) *MockRepository_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_User_Call) Return(_a0 RepositoryUser) *MockRepository_User_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_User_Call) RunAndReturn(run func(context.Context) RepositoryUser) *MockRepository_User_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyAccount provides a mock function with given fields: ctx
func (_m *MockRepository) VerifyAccount(ctx context.Context) RepositoryVerifyAccount {
	ret := _m.Called(ctx)

	var r0 RepositoryVerifyAccount
	if rf, ok := ret.Get(0).(func(context.Context) RepositoryVerifyAccount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RepositoryVerifyAccount)
		}
	}

	return r0
}

// MockRepository_VerifyAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAccount'
type MockRepository_VerifyAccount_Call struct {
	*mock.Call
}

// VerifyAccount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) VerifyAccount(ctx interface{}) *MockRepository_VerifyAccount_Call {
	return &MockRepository_VerifyAccount_Call{Call: _e.mock.On("VerifyAccount", ctx)}
}

func (_c *MockRepository_VerifyAccount_Call) Run(run func(ctx context.Context)) *MockRepository_VerifyAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_VerifyAccount_Call) Return(_a0 RepositoryVerifyAccount) *MockRepository_VerifyAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_VerifyAccount_Call) RunAndReturn(run func(context.Context) RepositoryVerifyAccount) *MockRepository_VerifyAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

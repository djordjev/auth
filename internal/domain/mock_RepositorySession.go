// Code generated by mockery v2.33.0. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockRepositorySession is an autogenerated mock type for the RepositorySession type
type MockRepositorySession struct {
	mock.Mock
}

type MockRepositorySession_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositorySession) EXPECT() *MockRepositorySession_Expecter {
	return &MockRepositorySession_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: user
func (_m *MockRepositorySession) Create(user User) (Session, error) {
	ret := _m.Called(user)

	var r0 Session
	var r1 error
	if rf, ok := ret.Get(0).(func(User) (Session, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(User) Session); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(Session)
	}

	if rf, ok := ret.Get(1).(func(User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositorySession_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepositorySession_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user User
func (_e *MockRepositorySession_Expecter) Create(user interface{}) *MockRepositorySession_Create_Call {
	return &MockRepositorySession_Create_Call{Call: _e.mock.On("Create", user)}
}

func (_c *MockRepositorySession_Create_Call) Run(run func(user User)) *MockRepositorySession_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(User))
	})
	return _c
}

func (_c *MockRepositorySession_Create_Call) Return(session Session, err error) *MockRepositorySession_Create_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockRepositorySession_Create_Call) RunAndReturn(run func(User) (Session, error)) *MockRepositorySession_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *MockRepositorySession) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositorySession_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepositorySession_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *MockRepositorySession_Expecter) Delete(key interface{}) *MockRepositorySession_Delete_Call {
	return &MockRepositorySession_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockRepositorySession_Delete_Call) Run(run func(key string)) *MockRepositorySession_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepositorySession_Delete_Call) Return(_a0 error) *MockRepositorySession_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositorySession_Delete_Call) RunAndReturn(run func(string) error) *MockRepositorySession_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockRepositorySession) Get(key string) (User, error) {
	ret := _m.Called(key)

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (User, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) User); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositorySession_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepositorySession_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockRepositorySession_Expecter) Get(key interface{}) *MockRepositorySession_Get_Call {
	return &MockRepositorySession_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockRepositorySession_Get_Call) Run(run func(key string)) *MockRepositorySession_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepositorySession_Get_Call) Return(user User, err error) *MockRepositorySession_Get_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockRepositorySession_Get_Call) RunAndReturn(run func(string) (User, error)) *MockRepositorySession_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositorySession creates a new instance of MockRepositorySession. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositorySession(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositorySession {
	mock := &MockRepositorySession{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

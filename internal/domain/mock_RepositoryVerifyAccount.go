// Code generated by mockery v2.34.2. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockRepositoryVerifyAccount is an autogenerated mock type for the RepositoryVerifyAccount type
type MockRepositoryVerifyAccount struct {
	mock.Mock
}

type MockRepositoryVerifyAccount_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryVerifyAccount) EXPECT() *MockRepositoryVerifyAccount_Expecter {
	return &MockRepositoryVerifyAccount_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: token, userId
func (_m *MockRepositoryVerifyAccount) Create(token string, userId uint64) (VerifyAccount, error) {
	ret := _m.Called(token, userId)

	var r0 VerifyAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint64) (VerifyAccount, error)); ok {
		return rf(token, userId)
	}
	if rf, ok := ret.Get(0).(func(string, uint64) VerifyAccount); ok {
		r0 = rf(token, userId)
	} else {
		r0 = ret.Get(0).(VerifyAccount)
	}

	if rf, ok := ret.Get(1).(func(string, uint64) error); ok {
		r1 = rf(token, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryVerifyAccount_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepositoryVerifyAccount_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - token string
//   - userId uint64
func (_e *MockRepositoryVerifyAccount_Expecter) Create(token interface{}, userId interface{}) *MockRepositoryVerifyAccount_Create_Call {
	return &MockRepositoryVerifyAccount_Create_Call{Call: _e.mock.On("Create", token, userId)}
}

func (_c *MockRepositoryVerifyAccount_Create_Call) Run(run func(token string, userId uint64)) *MockRepositoryVerifyAccount_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint64))
	})
	return _c
}

func (_c *MockRepositoryVerifyAccount_Create_Call) Return(verification VerifyAccount, err error) *MockRepositoryVerifyAccount_Create_Call {
	_c.Call.Return(verification, err)
	return _c
}

func (_c *MockRepositoryVerifyAccount_Create_Call) RunAndReturn(run func(string, uint64) (VerifyAccount, error)) *MockRepositoryVerifyAccount_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: token
func (_m *MockRepositoryVerifyAccount) Verify(token string) (VerifyAccount, error) {
	ret := _m.Called(token)

	var r0 VerifyAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (VerifyAccount, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) VerifyAccount); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(VerifyAccount)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryVerifyAccount_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockRepositoryVerifyAccount_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - token string
func (_e *MockRepositoryVerifyAccount_Expecter) Verify(token interface{}) *MockRepositoryVerifyAccount_Verify_Call {
	return &MockRepositoryVerifyAccount_Verify_Call{Call: _e.mock.On("Verify", token)}
}

func (_c *MockRepositoryVerifyAccount_Verify_Call) Run(run func(token string)) *MockRepositoryVerifyAccount_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepositoryVerifyAccount_Verify_Call) Return(verification VerifyAccount, err error) *MockRepositoryVerifyAccount_Verify_Call {
	_c.Call.Return(verification, err)
	return _c
}

func (_c *MockRepositoryVerifyAccount_Verify_Call) RunAndReturn(run func(string) (VerifyAccount, error)) *MockRepositoryVerifyAccount_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoryVerifyAccount creates a new instance of MockRepositoryVerifyAccount. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryVerifyAccount(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryVerifyAccount {
	mock := &MockRepositoryVerifyAccount{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

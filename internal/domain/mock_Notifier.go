// Code generated by mockery v2.34.2. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockNotifier is an autogenerated mock type for the Notifier type
type MockNotifier struct {
	mock.Mock
}

type MockNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotifier) EXPECT() *MockNotifier_Expecter {
	return &MockNotifier_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: to, subject, text, html
func (_m *MockNotifier) Send(to string, subject string, text string, html string) error {
	ret := _m.Called(to, subject, text, html)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(to, subject, text, html)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifier_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockNotifier_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - to string
//   - subject string
//   - text string
//   - html string
func (_e *MockNotifier_Expecter) Send(to interface{}, subject interface{}, text interface{}, html interface{}) *MockNotifier_Send_Call {
	return &MockNotifier_Send_Call{Call: _e.mock.On("Send", to, subject, text, html)}
}

func (_c *MockNotifier_Send_Call) Run(run func(to string, subject string, text string, html string)) *MockNotifier_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockNotifier_Send_Call) Return(_a0 error) *MockNotifier_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_Send_Call) RunAndReturn(run func(string, string, string, string) error) *MockNotifier_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotifier creates a new instance of MockNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotifier {
	mock := &MockNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/djordjev/auth/internal/domain/types"
)

// RepositoryUser is an autogenerated mock type for the RepositoryUser type
type RepositoryUser struct {
	mock.Mock
}

type RepositoryUser_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryUser) EXPECT() *RepositoryUser_Expecter {
	return &RepositoryUser_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: user
func (_m *RepositoryUser) Create(user types.User) (types.User, error) {
	ret := _m.Called(user)

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(types.User) (types.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(types.User) types.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(types.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryUser_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RepositoryUser_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user types.User
func (_e *RepositoryUser_Expecter) Create(user interface{}) *RepositoryUser_Create_Call {
	return &RepositoryUser_Create_Call{Call: _e.mock.On("Create", user)}
}

func (_c *RepositoryUser_Create_Call) Run(run func(user types.User)) *RepositoryUser_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.User))
	})
	return _c
}

func (_c *RepositoryUser_Create_Call) Return(newUser types.User, err error) *RepositoryUser_Create_Call {
	_c.Call.Return(newUser, err)
	return _c
}

func (_c *RepositoryUser_Create_Call) RunAndReturn(run func(types.User) (types.User, error)) *RepositoryUser_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: email
func (_m *RepositoryUser) GetByEmail(email string) (types.User, error) {
	ret := _m.Called(email)

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) types.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryUser_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type RepositoryUser_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *RepositoryUser_Expecter) GetByEmail(email interface{}) *RepositoryUser_GetByEmail_Call {
	return &RepositoryUser_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *RepositoryUser_GetByEmail_Call) Run(run func(email string)) *RepositoryUser_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RepositoryUser_GetByEmail_Call) Return(user types.User, err error) *RepositoryUser_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *RepositoryUser_GetByEmail_Call) RunAndReturn(run func(string) (types.User, error)) *RepositoryUser_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRepositoryUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryUser creates a new instance of RepositoryUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryUser(t mockConstructorTestingTNewRepositoryUser) *RepositoryUser {
	mock := &RepositoryUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

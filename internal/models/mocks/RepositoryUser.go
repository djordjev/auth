// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	models "github.com/djordjev/auth/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryUser is an autogenerated mock type for the RepositoryUser type
type RepositoryUser struct {
	mock.Mock
}

type RepositoryUser_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryUser) EXPECT() *RepositoryUser_Expecter {
	return &RepositoryUser_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: user
func (_m *RepositoryUser) Create(user models.User) (models.User, error) {
	ret := _m.Called(user)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryUser_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RepositoryUser_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user models.User
func (_e *RepositoryUser_Expecter) Create(user interface{}) *RepositoryUser_Create_Call {
	return &RepositoryUser_Create_Call{Call: _e.mock.On("Create", user)}
}

func (_c *RepositoryUser_Create_Call) Run(run func(user models.User)) *RepositoryUser_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *RepositoryUser_Create_Call) Return(newUser models.User, err error) *RepositoryUser_Create_Call {
	_c.Call.Return(newUser, err)
	return _c
}

func (_c *RepositoryUser_Create_Call) RunAndReturn(run func(models.User) (models.User, error)) *RepositoryUser_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *RepositoryUser) Delete(id uint) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryUser_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RepositoryUser_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *RepositoryUser_Expecter) Delete(id interface{}) *RepositoryUser_Delete_Call {
	return &RepositoryUser_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *RepositoryUser_Delete_Call) Run(run func(id uint)) *RepositoryUser_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *RepositoryUser_Delete_Call) Return(success bool, err error) *RepositoryUser_Delete_Call {
	_c.Call.Return(success, err)
	return _c
}

func (_c *RepositoryUser_Delete_Call) RunAndReturn(run func(uint) (bool, error)) *RepositoryUser_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: email
func (_m *RepositoryUser) GetByEmail(email string) (models.User, error) {
	ret := _m.Called(email)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryUser_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type RepositoryUser_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *RepositoryUser_Expecter) GetByEmail(email interface{}) *RepositoryUser_GetByEmail_Call {
	return &RepositoryUser_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *RepositoryUser_GetByEmail_Call) Run(run func(email string)) *RepositoryUser_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RepositoryUser_GetByEmail_Call) Return(user models.User, err error) *RepositoryUser_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *RepositoryUser_GetByEmail_Call) RunAndReturn(run func(string) (models.User, error)) *RepositoryUser_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function with given fields: username
func (_m *RepositoryUser) GetByUsername(username string) (models.User, error) {
	ret := _m.Called(username)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryUser_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type RepositoryUser_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - username string
func (_e *RepositoryUser_Expecter) GetByUsername(username interface{}) *RepositoryUser_GetByUsername_Call {
	return &RepositoryUser_GetByUsername_Call{Call: _e.mock.On("GetByUsername", username)}
}

func (_c *RepositoryUser_GetByUsername_Call) Run(run func(username string)) *RepositoryUser_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RepositoryUser_GetByUsername_Call) Return(user models.User, err error) *RepositoryUser_GetByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *RepositoryUser_GetByUsername_Call) RunAndReturn(run func(string) (models.User, error)) *RepositoryUser_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// SetPassword provides a mock function with given fields: user, password
func (_m *RepositoryUser) SetPassword(user models.User, password string) error {
	ret := _m.Called(user, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User, string) error); ok {
		r0 = rf(user, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryUser_SetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPassword'
type RepositoryUser_SetPassword_Call struct {
	*mock.Call
}

// SetPassword is a helper method to define mock.On call
//   - user models.User
//   - password string
func (_e *RepositoryUser_Expecter) SetPassword(user interface{}, password interface{}) *RepositoryUser_SetPassword_Call {
	return &RepositoryUser_SetPassword_Call{Call: _e.mock.On("SetPassword", user, password)}
}

func (_c *RepositoryUser_SetPassword_Call) Run(run func(user models.User, password string)) *RepositoryUser_SetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User), args[1].(string))
	})
	return _c
}

func (_c *RepositoryUser_SetPassword_Call) Return(_a0 error) *RepositoryUser_SetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryUser_SetPassword_Call) RunAndReturn(run func(models.User, string) error) *RepositoryUser_SetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: user
func (_m *RepositoryUser) Verify(user models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryUser_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type RepositoryUser_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - user models.User
func (_e *RepositoryUser_Expecter) Verify(user interface{}) *RepositoryUser_Verify_Call {
	return &RepositoryUser_Verify_Call{Call: _e.mock.On("Verify", user)}
}

func (_c *RepositoryUser_Verify_Call) Run(run func(user models.User)) *RepositoryUser_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *RepositoryUser_Verify_Call) Return(_a0 error) *RepositoryUser_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryUser_Verify_Call) RunAndReturn(run func(models.User) error) *RepositoryUser_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryUser creates a new instance of RepositoryUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryUser {
	mock := &RepositoryUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/djordjev/auth/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Atomic provides a mock function with given fields: fn
func (_m *Repository) Atomic(fn func(models.Repository) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(models.Repository) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Atomic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Atomic'
type Repository_Atomic_Call struct {
	*mock.Call
}

// Atomic is a helper method to define mock.On call
//   - fn func(models.Repository) error
func (_e *Repository_Expecter) Atomic(fn interface{}) *Repository_Atomic_Call {
	return &Repository_Atomic_Call{Call: _e.mock.On("Atomic", fn)}
}

func (_c *Repository_Atomic_Call) Run(run func(fn func(models.Repository) error)) *Repository_Atomic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(models.Repository) error))
	})
	return _c
}

func (_c *Repository_Atomic_Call) Return(_a0 error) *Repository_Atomic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Atomic_Call) RunAndReturn(run func(func(models.Repository) error) error) *Repository_Atomic_Call {
	_c.Call.Return(run)
	return _c
}

// ForgetPassword provides a mock function with given fields: ctx
func (_m *Repository) ForgetPassword(ctx context.Context) models.RepositoryForgetPassword {
	ret := _m.Called(ctx)

	var r0 models.RepositoryForgetPassword
	if rf, ok := ret.Get(0).(func(context.Context) models.RepositoryForgetPassword); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.RepositoryForgetPassword)
		}
	}

	return r0
}

// Repository_ForgetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForgetPassword'
type Repository_ForgetPassword_Call struct {
	*mock.Call
}

// ForgetPassword is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) ForgetPassword(ctx interface{}) *Repository_ForgetPassword_Call {
	return &Repository_ForgetPassword_Call{Call: _e.mock.On("ForgetPassword", ctx)}
}

func (_c *Repository_ForgetPassword_Call) Run(run func(ctx context.Context)) *Repository_ForgetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_ForgetPassword_Call) Return(_a0 models.RepositoryForgetPassword) *Repository_ForgetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_ForgetPassword_Call) RunAndReturn(run func(context.Context) models.RepositoryForgetPassword) *Repository_ForgetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function with given fields: ctx
func (_m *Repository) User(ctx context.Context) models.RepositoryUser {
	ret := _m.Called(ctx)

	var r0 models.RepositoryUser
	if rf, ok := ret.Get(0).(func(context.Context) models.RepositoryUser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.RepositoryUser)
		}
	}

	return r0
}

// Repository_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type Repository_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) User(ctx interface{}) *Repository_User_Call {
	return &Repository_User_Call{Call: _e.mock.On("User", ctx)}
}

func (_c *Repository_User_Call) Run(run func(ctx context.Context)) *Repository_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_User_Call) Return(_a0 models.RepositoryUser) *Repository_User_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_User_Call) RunAndReturn(run func(context.Context) models.RepositoryUser) *Repository_User_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyAccount provides a mock function with given fields: ctx
func (_m *Repository) VerifyAccount(ctx context.Context) models.RepositoryVerifyAccount {
	ret := _m.Called(ctx)

	var r0 models.RepositoryVerifyAccount
	if rf, ok := ret.Get(0).(func(context.Context) models.RepositoryVerifyAccount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.RepositoryVerifyAccount)
		}
	}

	return r0
}

// Repository_VerifyAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAccount'
type Repository_VerifyAccount_Call struct {
	*mock.Call
}

// VerifyAccount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) VerifyAccount(ctx interface{}) *Repository_VerifyAccount_Call {
	return &Repository_VerifyAccount_Call{Call: _e.mock.On("VerifyAccount", ctx)}
}

func (_c *Repository_VerifyAccount_Call) Run(run func(ctx context.Context)) *Repository_VerifyAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_VerifyAccount_Call) Return(_a0 models.RepositoryVerifyAccount) *Repository_VerifyAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_VerifyAccount_Call) RunAndReturn(run func(context.Context) models.RepositoryVerifyAccount) *Repository_VerifyAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

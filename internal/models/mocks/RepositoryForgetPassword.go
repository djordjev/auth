// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	models "github.com/djordjev/auth/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryForgetPassword is an autogenerated mock type for the RepositoryForgetPassword type
type RepositoryForgetPassword struct {
	mock.Mock
}

type RepositoryForgetPassword_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryForgetPassword) EXPECT() *RepositoryForgetPassword_Expecter {
	return &RepositoryForgetPassword_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: userId
func (_m *RepositoryForgetPassword) Create(userId uint) (models.ForgetPassword, error) {
	ret := _m.Called(userId)

	var r0 models.ForgetPassword
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.ForgetPassword, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) models.ForgetPassword); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(models.ForgetPassword)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryForgetPassword_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RepositoryForgetPassword_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - userId uint
func (_e *RepositoryForgetPassword_Expecter) Create(userId interface{}) *RepositoryForgetPassword_Create_Call {
	return &RepositoryForgetPassword_Create_Call{Call: _e.mock.On("Create", userId)}
}

func (_c *RepositoryForgetPassword_Create_Call) Run(run func(userId uint)) *RepositoryForgetPassword_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *RepositoryForgetPassword_Create_Call) Return(request models.ForgetPassword, err error) *RepositoryForgetPassword_Create_Call {
	_c.Call.Return(request, err)
	return _c
}

func (_c *RepositoryForgetPassword_Create_Call) RunAndReturn(run func(uint) (models.ForgetPassword, error)) *RepositoryForgetPassword_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: token, newPassword
func (_m *RepositoryForgetPassword) ResetPassword(token string, newPassword string) (bool, error) {
	ret := _m.Called(token, newPassword)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(token, newPassword)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(token, newPassword)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(token, newPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryForgetPassword_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type RepositoryForgetPassword_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - token string
//   - newPassword string
func (_e *RepositoryForgetPassword_Expecter) ResetPassword(token interface{}, newPassword interface{}) *RepositoryForgetPassword_ResetPassword_Call {
	return &RepositoryForgetPassword_ResetPassword_Call{Call: _e.mock.On("ResetPassword", token, newPassword)}
}

func (_c *RepositoryForgetPassword_ResetPassword_Call) Run(run func(token string, newPassword string)) *RepositoryForgetPassword_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RepositoryForgetPassword_ResetPassword_Call) Return(success bool, err error) *RepositoryForgetPassword_ResetPassword_Call {
	_c.Call.Return(success, err)
	return _c
}

func (_c *RepositoryForgetPassword_ResetPassword_Call) RunAndReturn(run func(string, string) (bool, error)) *RepositoryForgetPassword_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryForgetPassword creates a new instance of RepositoryForgetPassword. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryForgetPassword(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryForgetPassword {
	mock := &RepositoryForgetPassword{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
